name: dry-run in kind

env:
  kind_version: "v0.14.0"
  kind_kubectl_version: "v1.24.1"
  argocd_params: "--grpc-web --insecure --server argocd.127.0.0.1.nip.io"
  argocd_version: "2.3.4"
  argocd_projects_dir: "argocd/projects"
  go_version: '>=1.18.0'
  ACK_GINKGO_DEPRECATIONS: "1.16.5"

on:
  workflow_dispatch:
  workflow_run:
    workflows:
      - "trivy check"
      - "sh-checker"
    branches:
      - main
    pull_request:
      branches:
        - main
    types:
      - completed
  pull_request:
    branches:
      - main
#    paths:
#      - .github/workflows/dry-run.yml
#      - argocd/**
#      - kind/**
#      - tests/e2e/**
#      - Makefile
#  push:
#    branches-ignore:
#      - main
#    paths:
#      - .github/workflows/dry-run.yml
#      - argocd/**
#      - kind/**
#      - tests/e2e/**
#      - Makefile

jobs:
  dry-run:
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: "prepare env: clone repo"
        uses: actions/checkout@v3

#      - name: "prepare env: show vars"
#        run: env

#      - name: "debug: end workflow"
#        run: "false"

      - name: "prepare env: install make"
        run: |
          sudo apt update
          sudo apt install make -y

      - name: "prepare env: install golang"
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: "prepare env: init kind"
        uses: helm/kind-action@main
        with:
          version: "${{ env.kind_version }}"
          kubectl_version: "${{ env.kind_kubectl_version }}"
          install_only: true

      - name: "cluster create"
        run: make kind-create

      - name: "debug info: golang version"
        run: go version

      - name: "debug info: kubectl version"
        run: kubectl version

      - name: "debug info: k8s nodes and cluster-info"
        run: kubectl get nodes -o wide; kubectl cluster-info

      - name: "prepare cluster: fix prometheus-operator's CRDs"
        run: make kind-install-crds

      - name: "prepare cluster: install cilium"
        run: make cilium-install

      - name: "prepare cluster: show all pods"
        run: sleep 5 && kubectl get pods -A

      - name: "prepare cluster: install ArgoCD"
        run: make argocd-deploy

      - name: "prepare cluster: wait for argo-cd server ready"
        run: kubectl wait -n argocd --timeout=2m --for=condition=available deployment argocd-single-server

      - name: "prepare cluster: install nginx-ingress (and gateway-api CRDs)"
        run: make nginx-ingress-deploy

      - name: "prepare cluster: wait for argo-cd nginx init"
        run: sleep 15

#      - name: "prepare cluster: install cert-manager"
#        run: make cert-manager-deploy

      - name: "argo-cd: wait to ingress ready"
        run: kubectl wait -n ingress-nginx --timeout=2m --for=condition=available deployment nginx-ingress-ingress-nginx-controller

      - name: "debug info: show all deployments"
        if: always()
        run: kubectl get deployments -A

      - name: "debug info: show all pods"
        if: always()
        run: kubectl get pods -A

      - name: "debug info: show all services"
        if: always()
        run: kubectl get svc -A

      - name: "argo-cd: cli init"
        uses: clowdhaus/argo-cd-action/@main
        with:
          version: ${{ env.argocd_version }}
          command: version
          options: --client

      - name: "argo-cd: create projects"
        run: kubectl apply -f ${{ env.argocd_projects_dir }}

#      - name: "argo-cd: install changed app's defs"
#        run: ./scripts/detect_updated_argocd_apps.sh

      - name: "argo-cd: install prometheus-stack-deploy"
        run: make prometheus-stack-deploy

      - name: "argo-cd: keptn-prepare-images and install projects"
        run: |
          make keptn-prepare-images
          kubectl -n argocd apply -f argocd/projects/system-keptn.yaml

      - name: "argo-cd: install argo-rollouts (and sleep)"
        run: kubectl -n argocd apply -f argocd/argo-rollouts.yaml && sleep 10

      - name: "argo-cd: install keptn-nats (and sleep)"
        run: kubectl -n argocd apply -f argocd/keptn-nats.yaml && sleep 10

      - name: "argo-cd: install keptn-mongodb (and sleep)"
        run: kubectl -n argocd apply -f argocd/keptn-mongodb.yaml && sleep 10

      - name: "keptn: wait for keptn nats ready"
        id: keptnWaitToReady1
        timeout-minutes: 10
        run: |
          kubectl -n keptn wait --timeout=10m pod --for=condition=ready -l app=keptn-nats-cluster

      - name: "keptn: debug info (nats & mongodb)"
        if: failure() && steps.keptnWaitToReady1.outcome == 'failure'
        run: |
          kubectl -n keptn get deployments,sts || true
          kubectl -n keptn get pods -o wide || true
          kubectl -n keptn get pv,pvc || true
          kubectl -n keptn get svc || true
          kubectl -n keptn get smon || true
#          kubectl -n keptn describe sts -l app=keptn-nats-cluster || true
#          kubectl -n keptn describe deployments -l app.kubernetes.io/component=mongodb || true
#          kubectl -n keptn describe pod -l app.kubernetes.io/component=mongodb || true

      - name: "argo-cd: install keptn control plane (and sleep)"
        run: kubectl -n argocd apply -f argocd/keptn.yaml && sleep 10

      - name: "keptn: wait for deploy keptn services"
        id: keptnWaitToReady2
        timeout-minutes: 30
        run: |
          kubectl -n keptn wait --timeout=10m deployments --for=condition=available -l app.kubernetes.io/component=mongodb
          kubectl -n keptn wait --timeout=30m deployments --for=condition=available -l argocd.argoproj.io/instance=keptn

      - name: "keptn: debug info"
        if: failure() && steps.keptnWaitToReady2.outcome == 'failure'
        run: |
          kubectl -n keptn get deployments,sts || true
          kubectl -n keptn get pods -o wide || true
          kubectl -n keptn get svc || true
          kubectl -n keptn get smon || true

      - name: "argo-cd: show all apps"
        if: always()
        run: argocd app list ${{ env.argocd_params }}

      - name: "keptn: download cli"
        run: curl -sL https://get.keptn.sh | bash

      - name: "keptn: set login (and check keptn api)"
        run: make keptn-set-login

      - name: "keptn: prepare helm chart for hello"
        run: make keptn-helloserver-prepare-helm-charts

      - name: run test-network test - assets
        run: make test-network-apply-assets

      - name: run test-network test - wait to assets
        id: runNetTestWait
        run: |
          kubectl wait -n test-network --timeout=3m --for=condition=available deployment client
          kubectl wait -n test-network --timeout=3m --for=condition=available deployment podinfo

      - name: run test-network test - debug
        if: failure() && steps.runNetTestWait.outcome == 'failure'
        run: |
          kubectl -n test-network get po,svc,cnp || true
          kubectl -n test-network describe deployments/client || true
          kubectl -n test-network describe rs -l app=client || true

      - name: run test-network test - check
        run: |
          rs=$(make test-network-check-status)
          echo "$rs"
          echo "$rs" |grep "greetings from podinfo"

#      - name: "e2e tests: install dependencies"
#        run: |
#          cd tests/e2e
#          go mod vendor
#          go env -w GO111MODULE=auto
#
#      - name: "e2e tests: run"
#        id: runE2eTests
#        run: |
#          cd tests/e2e
#          go test ./... -report-dir=./junit -v

      - name: "e2e tests: debug info"
        if: failure() && steps.runE2eTests.outcome == 'failure'
        run: |
          kubectl get pods -A -o wide || true
          kubectl get svc -A || true
          kubectl get secrets -A || true
          kubectl get cnp -A || true
          kubectl get ccnp -A || true
          kubectl get issuers -A || true
          kubectl get certificates -A || true

#      - name: Publish Test Report
#        uses: mikepenz/action-junit-report@v3
#        if: always()
#        with:
#          report_paths: 'tests/e2e/junit/*.xml'

#      - name: Publish Test Results
#        uses: EnricoMi/publish-unit-test-result-action/composite@v1
#        if: always()
#        with:
#          comment_mode: off
#          files: 'tests/e2e/**/junit_*.xml'
